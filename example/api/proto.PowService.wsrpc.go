// Code generated by protoc-gen-wsrpc. DO NOT EDIT.
// source: example/api/proto.proto
// protoc version: 3.5.1
// protoc-gen-wsrpc version: 0.1.0-dev

package api

import (
	"github.com/Percona-Lab/wsrpc"
	"github.com/golang/protobuf/proto"
	"github.com/pkg/errors"
)

// Client API for api.PowService service

type PowServiceClient interface {
	Pow(*PowRequest) (*PowResponse, error)
}

type powServiceClient struct {
	conn *wsrpc.Conn
}

func NewPowServiceClient(conn *wsrpc.Conn) PowServiceClient {
	return &powServiceClient{conn}
}

func (c *powServiceClient) Pow(req *PowRequest) (*PowResponse, error) {
	b, err := proto.Marshal(req)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to marshal protobuf message %T", req)
	}
	if b, err = c.conn.Invoke("/api.PowService/Pow", b); err != nil {
		return nil, err
	}
	res := new(PowResponse)
	if err = proto.Unmarshal(b, res); err != nil {
		return nil, errors.Wrapf(err, "failed to unmarshal protobuf message to %T", res)
	}
	return res, nil
}

// check interface
var _ PowServiceClient = (*powServiceClient)(nil)

// Server API for api.PowService service

type PowServiceServer interface {
	Pow(*PowRequest) (*PowResponse, error)
}

type PowServiceDispatcher struct {
	conn   *wsrpc.Conn
	server PowServiceServer
}

func NewPowServiceDispatcher(conn *wsrpc.Conn, server PowServiceServer) *PowServiceDispatcher {
	return &PowServiceDispatcher{conn, server}
}

func dispatchPow(server interface{}, arg []byte) ([]byte, error) {
	req := new(PowRequest)
	if err := proto.Unmarshal(arg, req); err != nil {
		return nil, errors.Wrapf(err, "failed to unmarshal protobuf message to %T", req)
	}
	res, err := server.(PowServiceServer).Pow(req)
	if err != nil {
		return nil, err
	}
	b, err := proto.Marshal(res)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to marshal protobuf message %T", res)
	}
	return b, nil
}

var powServiceDescription = &wsrpc.ServiceDesc{
	Methods: []wsrpc.ServiceMethod{
		{
			Path:   "/api.PowService/Pow",
			Method: dispatchPow,
		},
	},
}

func (d *PowServiceDispatcher) Run() (exitErr error) {
	for {
		message, err := d.conn.Read()
		if err != nil {
			exitErr = errors.Wrap(err, "failed to read message")
			return
		}

		var found bool
		for _, method := range powServiceDescription.Methods {
			if method.Path != message.Path {
				continue
			}

			res, err := method.Method(d.server, message.Arg)
			if err != nil {
				exitErr = errors.Wrapf(err, "%s returned error", method.Path)
				return
			}

			message = &wsrpc.Message{
				StreamID: message.StreamID,
				Path:     message.Path,
				Arg:      res,
			}
			if err = d.conn.Write(message); err != nil {
				// TODO close stream, not not the whole connection
				exitErr = errors.Wrap(err, "failed to write message")
				return
			}

			found = true
			break
		}

		if !found {
			exitErr = errors.Wrapf(err, "unexpected path %q", message.Path)
			return
		}
	}
}
