// Code generated by protoc-gen-wsrpc. DO NOT EDIT.
// source: example/api/proto.proto

package api

import (
	"context"
	"log"

	"github.com/Percona-Lab/wsrpc"
	"github.com/golang/protobuf/proto"
	"github.com/pkg/errors"
)

// Client API for api.PowService service

type PowServiceClient interface {
	Pow(context.Context, *PowRequest) (*PowResponse, error)
}

type powServiceClient struct {
	conn *wsrpc.Conn
}

func NewPowServiceClient(conn *wsrpc.Conn) PowServiceClient {
	return &powServiceClient{conn}
}

func (c *powServiceClient) Pow(ctx context.Context, req *PowRequest) (*PowResponse, error) {
	b, err := proto.Marshal(req)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to marshal protobuf message %T", req)
	}
	if b, err = c.conn.Invoke("Pow", b); err != nil {
		return nil, err
	}
	res := new(PowResponse)
	if err = proto.Unmarshal(b, res); err != nil {
		return nil, errors.Wrapf(err, "failed to unmarshal protobuf message to %T", res)
	}
	return res, nil
}

// Server API for api.PowService service

type PowServiceServer interface {
	Pow(context.Context, *PowRequest) (*PowResponse, error)
}

type PowServiceDispatcher struct {
	conn   *wsrpc.Conn
	server PowServiceServer
}

func NewPowServiceDispatcher(conn *wsrpc.Conn, server PowServiceServer) *PowServiceDispatcher {
	return &PowServiceDispatcher{conn, server}
}

func dispatchPow(server interface{}, arg []byte) ([]byte, error) {
	req := new(PowRequest)
	if err := proto.Unmarshal(arg, req); err != nil {
		return nil, errors.Wrapf(err, "failed to unmarshal protobuf message to %T", req)
	}
	res, err := server.(PowServiceServer).Pow(context.TODO(), req)
	if err != nil {
		return nil, err
	}
	b, err := proto.Marshal(res)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to marshal protobuf message %T", res)
	}
	return b, nil
}

var powServiceDescription = &wsrpc.ServiceDesc{
	Methods: []wsrpc.ServiceMethod{
		{
			Name:   "Pow",
			Method: dispatchPow,
		},
	},
}

func (d *PowServiceDispatcher) Run(ctx context.Context) {
	for {
		message, err := d.conn.Read(ctx)
		if err != nil {
			log.Panic(err)
		}

		var found bool
		for _, method := range powServiceDescription.Methods {
			if method.Name != message.Path {
				continue
			}

			res, err := method.Method(d.server, message.Arg)
			if err != nil {
				log.Panic(err)
			}

			message = &wsrpc.V1Message{
				V1MessageHeader: wsrpc.V1MessageHeader{
					StreamID: message.StreamID,
					PathLen:  uint8(len(message.Path)),
				},
				Path: message.Path,
				Arg:  res,
			}
			if err = d.conn.Write(ctx, message); err != nil {
				log.Panic(err)
			}

			found = true
			break
		}

		if !found {
			log.Panicf("unexpected path %q", message.Path)
		}
	}
}
